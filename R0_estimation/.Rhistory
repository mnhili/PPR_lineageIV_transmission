library(ggplot2)
library(dplyr)
library(tidyr)
# Read your data into a data frame
data <- read.csv("simulation_results_v2.csv")
# Reshape data from wide to long format
long_data <- pivot_longer(data, cols = starts_with("Iteration"),
names_to = "simulation",
values_to = "cases")
# Calculate average for each day, size, and density
avg_data <- long_data %>%
group_by(Infectious.Time, Population.Size, Density) %>%
summarize(avg_cases = round(mean(cases, na.rm = TRUE)))
# Create faceted plot
ggplot(avg_data, aes(x = Infectious.Time, y = avg_cases)) +
geom_line() +
facet_wrap(~Population.Size + Density, ncol = 3) +
labs(x = "Day", y = "Average Number of Cases") +
ggtitle("Trajectories of Average Cases by Size and Density")
# Get unique day values for x-axis ticks
unique_days <- sort(unique(avg_data$Infectious.Time))
# Create faceted plot with custom x-axis ticks
ggplot(avg_data, aes(x = Infectious.Time, y = avg_cases)) +
geom_line() +
facet_wrap(~Population.Size + Density, ncol = 3) +
labs(x = "Day", y = "Average Number of Secondary Cases") +
ggtitle("Trajectories of Average Secondary Cases by Size and Density") +
scale_x_continuous(breaks = unique_days, labels = unique_days)
setwd("D:/Manal/phd_ppr_manal/R0_estimation")
library(ggplot2)
library(dplyr)
library(tidyr)
# Read your data into a data frame
data <- read.csv("simulation_results_v4.csv")
# Reshape data from wide to long format
long_data <- pivot_longer(data, cols = starts_with("Iteration"),
names_to = "simulation",
values_to = "cases")
library(ggplot2)
library(dplyr)
library(tidyr)
# Read your data into a data frame
data <- read.csv("simulation_results_v4.csv")
# Reshape data from wide to long format
long_data <- pivot_longer(data, cols = starts_with("iter"),
names_to = "simulation",
values_to = "cases")
# Read your data into a data frame
data <- read.csv("simulation_results_v4.csv")
library(ggplot2)
library(dplyr)
library(tidyr)
setwd("D:/Manal/phd_ppr_manal/R0_estimation")
# Read your data into a data frame
data <- read.csv("simulation_results_v4.csv")
View(data)
# Read your data into a data frame
data <- read.csv("simulation_results_v4.csv", separator = ";")
# Read your data into a data frame
data <- read.csv("simulation_results_v4.csv", sep = ";")
# Reshape data from wide to long format
long_data <- pivot_longer(data, cols = starts_with("Iteration"),
names_to = "simulation",
values_to = "cases")
# Reshape data from wide to long format
long_data <- pivot_longer(data, cols = starts_with("iter"),
names_to = "simulation",
values_to = "cases")
# Calculate average for each day, size, and density
mean_data <- long_data %>%
group_by(Infectious.Time, Population.Size, Density) %>%
summarize(avg_cases = round(mean(cases, na.rm = TRUE)))
# Calculate average for each day, size, and density
mean_data <- long_data %>%
group_by(Infectious_time, Population_Ssize, Density) %>%
summarize(avg_cases = round(mean(cases, na.rm = TRUE)))
# Calculate average for each day, size, and density
mean_data <- long_data %>%
group_by(Infectious_time, Population_size, Density) %>%
summarize(avg_cases = round(mean(cases, na.rm = TRUE)))
# Calculate average for each day, size, and density
median_data <- long_data %>%
group_by(Infectious_time, Population_size, Density) %>%
summarize(avg_cases = round(median(cases, na.rm = TRUE)))
# Get unique day values for x-axis ticks
unique_days <- sort(unique(mean_data$Infectious_time))
View(mean_data)
# Create faceted plot
ggplot(mean_data, aes(x = Infectious_time, y = avg_cases)) +
geom_line() +
facet_wrap(~Population_size + Density, ncol = 3) +
labs(x = "Day", y = "Average Number of Cases") +
ggtitle("Trajectories of Average Cases by Size and Density")
# Create faceted plot
ggplot(mean_data, aes(x = Population_size, y = avg_cases)) +
geom_line() +
group_by(~Density)+
facet_wrap(~Infectious_time, ncol = 3) +
labs(x = "Day", y = "Average Number of Cases") +
ggtitle("Trajectories of Average Cases by Size and Density")
ggplot(mean_data, aes(x = Population_size, y = avg_cases, color = Density, group = Density)) +
geom_line() +  # Utilisez geom_point() si vous voulez des points au lieu de lignes, ou combinez les deux.
facet_wrap(~ Infectious_time) +
labs(x = "Population Size", y = "Average number of secondary cases", color = "Density") +
theme_minimal()
ggplot(mean_data, aes(x = Population_size, y = avg_cases, color = Density, group = Density)) +
geom_line(size = 2) +
geom_point()+# Utilisez geom_point() si vous voulez des points au lieu de lignes, ou combinez les deux.
facet_wrap(~ Infectious_time, nrow = 1) +
labs(x = "Population Size", y = "Average number of secondary cases", color = "Density") +
theme_minimal()
ggplot(mean_data, aes(x = Population_size, y = avg_cases, color = Density, group = Density)) +
geom_line(linewidth = 2) +
geom_point()+# Utilisez geom_point() si vous voulez des points au lieu de lignes, ou combinez les deux.
facet_wrap(~ Infectious_time, nrow = 1) +
labs(x = "Population Size", y = "Average number of secondary cases", color = "Density") +
theme_minimal()
ggplot(mean_data, aes(x = Population_size, y = avg_cases, color = Density, group = Density)) +
geom_line(linewidth = 1) +
geom_point()+# Utilisez geom_point() si vous voulez des points au lieu de lignes, ou combinez les deux.
facet_wrap(~ Infectious_time, nrow = 1) +
labs(x = "Population Size", y = "Average number of secondary cases", color = "Density") +
theme_minimal()
# Get unique day values for x-axis ticks
unique_pop_size <- sort(unique(mean_data$Population_size))
ggplot(mean_data, aes(x = Population_size, y = avg_cases, color = Density, group = Density)) +
geom_line(linewidth = 1) +
geom_point()+# Utilisez geom_point() si vous voulez des points au lieu de lignes, ou combinez les deux.
facet_wrap(~ Infectious_time, nrow = 1) +
labs(x = "Population Size", y = "Average number of secondary cases", color = "Density") +
ggtitle()+
theme_minimal()
install.packages("plotly")
library(ggplot2)
library(dplyr)
library(tidyr)
library(plotly)
#install.packages("plotly")
# Read your data into a data frame
data <- read.csv("simulation_results_v4.csv", sep = ";")
# Reshape data from wide to long format
long_data <- pivot_longer(data, cols = starts_with("iter"),
names_to = "simulation",
values_to = "cases")
# Calculate average for each day, size, and density
mean_data <- long_data %>%
group_by(Infectious_time, Population_size, Density) %>%
summarize(avg_cases = round(mean(cases, na.rm = TRUE)))
# Calculate average for each day, size, and density
median_data <- long_data %>%
group_by(Infectious_time, Population_size, Density) %>%
summarize(avg_cases = round(median(cases, na.rm = TRUE)))
# Get unique day values for x-axis ticks
unique_pop_size <- sort(unique(mean_data$Population_size))
plot <- ggplot(mean_data, aes(x = Population_size, y = avg_cases, color = Density, group = Density)) +
geom_line(linewidth = 1) +
geom_point()+# Utilisez geom_point() si vous voulez des points au lieu de lignes, ou combinez les deux.
facet_wrap(~ Infectious_time, nrow = 1) +
labs(x = "Population Size", y = "Average number of secondary cases", color = "Density") +
ggtitle("Secondary cases Vs Population size by density per Infectious time")+
theme_minimal()
plot
interactive <- plotly(plot)
interactive <- plotly_build(plot)
interactive
interactive <- ggplotly(plot)
interactive
library(ggplot2)
library(dplyr)
library(tidyr)
library(plotly)
library(ggplot2)
library(dplyr)
library(tidyr)
library(plotly)
library(ggplot2)
library(dplyr)
library(tidyr)
library(plotly)
library(ggplot2)
library(dplyr)
library(tidyr)
library(plotly)
library(ggplot2)
library(dplyr)
library(tidyr)
library(plotly)
# Read your data into a data frame
data <- read.csv("simulation_results_v4.csv", sep = ";")
# Reshape data from wide to long format
long_data <- pivot_longer(data, cols = starts_with("iter"),
names_to = "simulation",
values_to = "cases")
# Calculate average for each day, size, and density
mean_data <- long_data %>%
group_by(Infectious_time, Population_size, Density) %>%
summarize(avg_cases = round(mean(cases, na.rm = TRUE)))
# Calculate average for each day, size, and density
median_data <- long_data %>%
group_by(Infectious_time, Population_size, Density) %>%
summarize(avg_cases = round(median(cases, na.rm = TRUE)))
# Get unique day values for x-axis ticks
unique_pop_size <- sort(unique(mean_data$Population_size))
plot <- ggplot(mean_data, aes(x = Population_size, y = avg_cases, color = Density, group = Density)) +
geom_line(linewidth = 1) +
geom_point()+# Utilisez geom_point() si vous voulez des points au lieu de lignes, ou combinez les deux.
facet_wrap(~ Infectious_time, nrow = 1) +
labs(x = "Population Size", y = "Average number of secondary cases", color = "Density") +
ggtitle("Secondary cases Vs Population size by density per Infectious time")+
theme_minimal()
plot
interactive <- ggplotly(plot)
interactive
plot
interactive <- ggplotly(plot)
interactive
plot <- ggplot(mean_data, aes(x = Population_size, y = avg_cases, color = Density, group = Density)) +
geom_line(linewidth = 1) +
geom_point()+
facet_wrap(~ Infectious_time, nrow = 1) +
labs(x = "Population Size", y = "Average number of secondary cases", color = "Density") +
ggtitle("Secondary cases Vs Population size by density per Infectious time")+
theme_minimal()
plot
ggplotly(plot)
p <- ggplot(mean_data, aes(x = Population_size, y = avg_cases, color = Density, group = Density)) +
geom_line(linewidth = 1) +
geom_point()+
facet_wrap(~ Infectious_time, nrow = 1) +
labs(x = "Population Size", y = "Average number of secondary cases", color = "Density") +
ggtitle("Secondary cases Vs Population size by density per Infectious time")+
theme_minimal()
p_interactive <- ggplotly(p)
# Affichage du graphique interactif
p_interactive
p_interactive <- ggplotly(p)
# Affichage du graphique interactif
p_interactive
p <- ggplot(mean_data, aes(x = Population_size, y = avg_cases, color = Density, group = Density)) +
geom_line(linewidth = 1) +
geom_point()+
facet_wrap(~ Infectious_time, nrow = 1) +
labs(x = "Population Size", y = "Average number of secondary cases", color = "Density") +
ggtitle("Secondary cases Vs Population size by density per Infectious time")+
theme_minimal()
p
p <- ggplot(mean_data, aes(x = Population_size, y = avg_cases, color = Density, group = Density)) +
geom_line(linewidth = 1) +
geom_point()+
facet_wrap(~ Infectious_time, ncol = 4) +
labs(x = "Population Size", y = "Average number of secondary cases", color = "Density") +
ggtitle("Secondary cases Vs Population size by density per Infectious time")+
theme_minimal()
p
p <- ggplot(mean_data, aes(x = Population_size, y = avg_cases, color = Density, group = Density)) +
geom_line(linewidth = 1) +
geom_point()+
facet_wrap(~ Infectious_time, ncol = 1) +
labs(x = "Population Size", y = "Average number of secondary cases", color = "Density") +
ggtitle("Secondary cases Vs Population size by density per Infectious time")+
theme_minimal()
p
p <- ggplot(mean_data, aes(x = Population_size, y = avg_cases, color = Density, group = Density)) +
geom_line(linewidth = 1) +
geom_point()+
facet_wrap(~ Infectious_time, ncol = 2) +
labs(x = "Population Size", y = "Average number of secondary cases", color = "Density") +
ggtitle("Secondary cases Vs Population size by density per Infectious time")+
theme_minimal()
p
data <- read.csv("simulation_results_v4.csv", sep = ";")
# Reshape data from wide to long format
long_data <- pivot_longer(data, cols = starts_with("iter"),
names_to = "simulation",
values_to = "cases")
# Calculate average for each day, size, and density
mean_data <- long_data %>%
group_by(Infectious_time, Population_size, Density) %>%
summarize(avg_cases = round(mean(cases, na.rm = TRUE)))
# Calculate average for each day, size, and density
median_data <- long_data %>%
group_by(Infectious_time, Population_size, Density) %>%
summarize(avg_cases = round(median(cases, na.rm = TRUE)))
# Get unique day values for x-axis ticks
unique_pop_size <- sort(unique(mean_data$Population_size))
p <- ggplot(mean_data, aes(x = Population_size, y = avg_cases, color = Density, group = Density)) +
geom_line(linewidth = 1) +
geom_point()+
facet_wrap(~ Infectious_time, ncol = 2) +
labs(x = "Population Size", y = "Average number of secondary cases", color = "Density") +
ggtitle("Secondary cases Vs Population size by density per Infectious time")+
theme_minimal()
p
library(ggplot2)
library(dplyr)
library(tidyr)
library(plotly)
#install.packages("plotly")
# Read your data into a data frame
data <- read.csv("simulation_results_v4.csv", sep = ";")
# Reshape data from wide to long format
long_data <- pivot_longer(data, cols = starts_with("iter"),
names_to = "simulation",
values_to = "cases")
# Calculate average for each day, size, and density
mean_data <- long_data %>%
group_by(Infectious_time, Population_size, Density) %>%
summarize(avg_cases = mean(cases, na.rm = TRUE)/Infectious_time)
# Calculate average for each day, size, and density
median_data <- long_data %>%
group_by(Infectious_time, Population_size, Density) %>%
summarize(avg_cases = round(median(cases, na.rm = TRUE)))
# Get unique day values for x-axis ticks
unique_pop_size <- sort(unique(mean_data$Population_size))
p <- ggplot(mean_data, aes(x = Population_size, y = avg_cases, color = Density, group = Density)) +
geom_line(linewidth = 1) +
geom_point()+
facet_wrap(~ Infectious_time, ncol = 2) +
labs(x = "Population Size", y = "Average number of secondary cases", color = "Density") +
ggtitle("Secondary cases Vs Population size by density per Infectious time")+
theme_minimal()
p
mean_data_1 <- long_data %>%
group_by(Infectious_time, Population_size, Density) %>%
summarize(avg_cases = mean(cases, na.rm = TRUE)/Population_size)
mean_data_1 <- long_data %>%
group_by(Infectious_time, Population_size, Density) %>%
summarize(avg_cases = mean(cases, na.rm = TRUE)/Population_size)
g <- ggplot(mean_data_1, aes(x = Population_size, y = avg_cases, color = Density, group = Density)) +
geom_line(linewidth = 1) +
geom_point()+
facet_wrap(~ Infectious_time, ncol = 2) +
labs(x = "Population Size", y = "Average number of secondary cases", color = "Density") +
ggtitle("Secondary cases Vs Population size by density per Infectious time")+
theme_minimal()
g
setwd("D:/Manal/phd_ppr_manal/R0_estimation")
setwd("D:/Manal/phd_ppr_manal/R0_estimation")
library(ggplot2)
library(dplyr)
library(tidyr)
library(plotly)
library(ggplot2)
library(dplyr)
library(tidyr)
library(plotly)
# Read your data into a data frame
data <- read.csv("simulation_results_v5.csv", sep = ";")
# Reshape data from wide to long format
long_data <- pivot_longer(data, cols = starts_with("iter"),
names_to = "simulation",
values_to = "cases")
# Read your data into a data frame
data <- read.csv("simulation_results_v5.csv")
# Reshape data from wide to long format
long_data <- pivot_longer(data, cols = starts_with("iter"),
names_to = "simulation",
values_to = "cases")
# Calculate average for each day, size, and density
mean_data <- long_data %>%
group_by(Infectious_time, Population_size, Density) %>%
summarize(avg_cases = mean(cases, na.rm = TRUE)/Infectious_time)
mean_data_1 <- long_data %>%
group_by(Infectious_time, Population_size, Density) %>%
summarize(avg_cases = mean(cases, na.rm = TRUE)/Population_size)
# Calculate average for each day, size, and density
median_data <- long_data %>%
group_by(Infectious_time, Population_size, Density) %>%
summarize(avg_cases = round(median(cases, na.rm = TRUE)))
# Get unique day values for x-axis ticks
unique_pop_size <- sort(unique(mean_data$Population_size))
p <- ggplot(mean_data, aes(x = Population_size, y = avg_cases, color = Density, group = Density)) +
geom_line(linewidth = 1) +
geom_point()+
facet_wrap(~ Infectious_time, ncol = 2) +
labs(x = "Population Size", y = "Average number of secondary cases", color = "Density") +
ggtitle("Secondary cases Vs Population size by density per Infectious time")+
theme_minimal()
p
g <- ggplot(mean_data_1, aes(x = Population_size, y = avg_cases, color = Density, group = Density)) +
geom_line(linewidth = 1) +
geom_point()+
facet_wrap(~ Infectious_time, ncol = 2) +
labs(x = "Population Size", y = "Average number of secondary cases", color = "Density") +
ggtitle("Secondary cases Vs Population size by density per Infectious time")+
theme_minimal()
g
